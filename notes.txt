Use only the following standard Lisp functions, macros, operators, and constants in your
definitions, along with any previously completed functions in this project:

- T
- NIL
- IF
- WHEN
- COND
- NOT
- AND
- OR
- EQUAL
- CONS
- LIST
- CAR
- CDR
- FIRST
- SECOND
- THIRD
- LENGTH
- DEFUN
- LABELS
- LET
- LET*
- FUNCALL
- QUOTE
- any numerical constatnt


1)
- Return T if item is a member of set.
- Return NIL if item is not a member of set.
- The type of set is list.
- Examples:
    (set-member '(1 2) 1) => T
    (set-member '(1 2) 3) => NIL
  -(defun set-member (set item)
    Your implementation go here
    )
--------------------------------------------------------------------
2)
- Return the union of set-1 and set-2.
- The result should contain no duplicates.
- Assume set-1 contains no duplicates and set-2 contains no duplicates.
    Examples:
      (set-union '(1 2) '(2 4)) => '(1 2 4)
    -(defun set-union (set-1 set-2)
      Your implementation go here
      )
----------------------------------------------------------------------
3)
- Return the intersection of set-1 and set-2.
- The result should contain no duplicates.
- Assume set-1 contains no duplicates and set-2 contains no duplicates.
    Examples:
      (set-intersection '(1 2) '(2 4)) => '(2)
    -(defun set-intersection (set-1 set-2)
      Your implementation go here
      )
--------------------------------------------------------------------------
4)
- Return the difference of set-1 and set-2.
- The result should contain no duplicates.
- Assume set-1 contains no duplicates and set-2 contains no duplicates.
    Examples:
      (set-diff '(1 2) '(2 4)) => '(1)
    -(defun set-diff (set-1 set-2)
      Your implementation go here
      )
------------------------------------------------------------------
5)
- Return the exclusive or of a and b
    Examples:
      (boolean-xor t nil) => t
      (boolean-xor nil nil) => nil
    -(defun boolean-xor (a b)
      Your implementation go here
      )
----------------------------------------------------------------------------
6)
- Return the implication of a and b
    Examples:
      (boolean-implies t nil) => nil
      (boolean-implies nil nil) => t
    -(defun boolean-implies (a b)
      Your implementation go here
      )
-------------------------------------------------------------------------
7)
- Return the bi-implication (if and only if) of a and b
    Examples:
      (boolean-iff t nil) => nil
      (boolean-iff nil nil) => t
    -(defun boolean-iff (a b)
      Your implementation go here 
      )
---------------------------------------------------------------------
8)
- Evaluate a boolean expression.
- Handle NOT, AND, OR, XOR, IMPLIES, and IFF.
    Examples:
      (boolean-eval '(and t nil)) => nil
      (boolean-eval '(and t (or nil t)) => t
    -(defun boolean-eval (exp)
      Your implementation go here 
      )